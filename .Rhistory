write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = F, asc = F)
df <- data.frame(coordinates(XYZ.proj), raster::extract(r5km,XYZ.proj))
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = T) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~LONG+LAT
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = F, asc = F)
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = T) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), raster::extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~LONG+LAT
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = F, asc = F)
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = T) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), raster::extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~x+y
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = F, asc = F)
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = T, asc = F)
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = ) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
require(raster)
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), raster::extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~x+y
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = ) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
require(raster)
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), raster::extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~x+y
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
extractXYZ <- function (filename, XYZ, proj1, proj2, txt = T, asc = T, plot = T) {
#filename is projected ArcMap grid, XYZ is spatial points dataframe with geographic crs
require(raster)
setwd(SPATIALDATA_DIRECTORY)
template <- raster("templateRaster.asc")
crs(template) <- CRS(proj1)
r <- raster(paste("DISTURBANCE/CYCLONES/", filename, sep = ""))
CRS.proj <- crs(proj2)
CRS.geo <- crs(template)
#create projected version of XYZ grid
XYZ.proj <- spTransform(XYZ, CRS.proj)
#extract values from input raster by transformed XYZ grid
df <- data.frame(coordinates(XYZ.proj), raster::extract(r,XYZ.proj))
names(df)[3] <- "Hs4MW"
#convert back to Spatial points df
coordinates(df) <- ~x+y
crs(df) <- CRS.proj
#transform back to geographic
sp1km <- spTransform(df,CRS.geo)
r1km <- rasterize(sp1km, template, sp1km@data$Hs4MW, fun=mean)
if(txt)
setwd(SPATIALDATA_DIRECTORY)
df1 <- data.frame(coordinates(XYZ), raster::extract(r1km, XYZ))
names(df1)[3] <- "Hs4MW"
write.table(df1, file=paste0("DISTURBANCE/CYCLONES/TXT_FILES/", filename, ".txt"), row.names = F)
if(asc)
setwd(SPATIALDATA_DIRECTORY)
writeRaster(r1km,filename=paste0("DISTURBANCE/CYCLONES/ASC_FILES/", filename, ".asc"),format="ascii",overwrite=T)
if(plot) plot(r1km, main=paste0(filename, "_Hs4MW Damage Zone"))
}
for(i in 1:length(cyclone.names))
extractXYZ(cyclone.names[i], XYZ, projection, CRS.proj, txt = T, asc = F, plot = F)
cyclone.names
cyclone.names <- list.dirs(path = "DISTURBANCE/CYCLONES", full.names = F, recursive = F)
cyclone.names
cyclone.names <- cyclone.names[-c(3,4,13,18,35)]
cyclone.names
for(i in 1:length(cyclone.names[15:33]))
extractXYZ(cyclone.names[i+14], XYZ, projection, CRS.proj, txt = T, asc = F, plot = F)
all.years <- 1985:2015
setwd(SPATIALDATA_DIRECTORY)
df <- data.frame(coordinates(XYZ))
for(i in 1:length(cyclone.names))
df[,i+2] <- read.table(paste0("DISTURBANCE/CYCLONES/TXT_FILES/",cyclone.names[i], ".txt"), header = T)[,3]
names(df)[3:35] <- cyclone.names
write.table(df, "DISTURBANCE/CYCLONES/TXT_FILES/Cyclone1985_2015.txt", row.names = F)
cyclone.dates <- na.omit(read.csv("DISTURBANCE/CYCLONES/Cyclone_years.csv"))
colnames(df)[3:35] <- cyclone.dates[,3]
years <- unique(names(df)[3:35])
df.sum <- sapply(years, function(xx) rowSums(df[,grep(xx,names(df)), drop=F]))
df.sum <- data.frame(df[,1:2], df.sum)
colnames(df.sum)[3:25] <- years
missing.years <- all.years !%in% colnames(df.sum)[3:25]
missing.years <- all.years %in% colnames(df.sum)[3:25]
missing.years <- ally.years[all.years %in% colnames(df.sum)[3:25]]
missing.years <- all.years[all.years %in% colnames(df.sum)[3:25]]
missing.years <- all.years![all.years %in% colnames(df.sum)[3:25]]
missing.years <- all.years[!(all.years %in% colnames(df.sum)[3:25])]
df.sum[missing.years] <- NA
df.sum[as.character(missing.years)] <- NA
(target <- sort(all.years))
df.sum1 <- data.frame(df.sum[,1:2],df.sum[,3:33][,target])
df.sum1 <- data.frame(df.sum[,1:2],df.sum[,3:33][,target])
df.sum1 <- data.frame(df.sum[,1:2],df.sum[,3:33][,as.character(target)])
write.table(df.sum1, "DISTURBANCE/CYCLONES/TXT_FILES/Cyclone1985_2015SUM.txt", row.names = F)
write.csv(df.sum1, "DISTURBANCE/CYCLONES/TXT_FILES/Cyclone1985_2015SUM.csv", row.names = F)
Cyclones <- read.csv("DISTURBANCE/CYCLONES/Cyclone1985_2015SUM.csv", header=T)
setwd(DATA_DIRECTORY)
Cyclones[is.na(Cyclones)] <- 0
write.table(Cyclones, "Cyclones1985_2015.txt", row.names = FALSE, sep = '\t')
Cyclones <- read.csv("DISTURBANCE/CYCLONES/Cyclone1985_2015SUM.csv", header=T)
write.csv(df.sum1, "DISTURBANCE/CYCLONES/TXT_FILES/Cyclone1985_2015SUM.csv", row.names = F)
setwd(DATA_DIRECTORY)
write.table(df.sum1, "DISTURBANCE/CYCLONES/TXT_FILES/Cyclone1985_2015SUM.txt", row.names = F)
write.table(df.sum1, "Cyclone1985_2015SUM.txt", row.names = F)
Cyclones <- read.table("Cyclones1985_2015.txt", header = T, sep = '\t')
write.table(df.sum1, "Cyclone1985_2015SUM.txt", row.names = F)
write.table(df.sum1, "Cyclones1985_2015SUM.txt", row.names = F)
Cyclones <- read.table("Cyclones1985_2015.txt", header = T, sep = '\t')
View(df.sum1)
View(Cyclones)
Cyclones.RM <- merge(Cyclones, RM.Sites.round1, by=c('x','y'), all.y = T)
View(Cyclones.RM)
write.table(Bleaching.RM, "Bleaching.txt", row.names = F, sep = "\t")
write.table(COTS.RM, "COTS.txt", row.names = F, sep = "\t")
write.table(Cyclones.RM, "Cyclones.txt", row.names = F, sep = "\t")
setwd(DATA_DIRECTORY)
write.table(Bleaching.RM, "Bleaching.txt", row.names = F, sep = "\t")
write.table(COTS.RM, "COTS.txt", row.names = F, sep = "\t")
write.table(Cyclones.RM, "Cyclones.txt", row.names = F, sep = "\t")
write.table(Bleaching.RM, "BleachingRM.txt", row.names = F, sep = "\t")
write.table(COTS.RM, "COTSRM.txt", row.names = F, sep = "\t")
write.table(Cyclones.RM, "CyclonesRM.txt", row.names = F, sep = "\t")
write.table(COTS, "COTS.txt", row.names = F, sep = "\t")
write.table(Bleaching, "Bleaching.txt", row.names = F, sep = "\t")
write.table(df.sum1, "Cyclones1985_2015SUM.txt", row.names = F)
write.table(df.sum1, "Cyclones1985_2015.txt", row.names = F)
Cyclones <- read.table("Cyclones1985_2015.txt", header = T, sep = '\t')
write.table(df.sum1, "Cyclones1985_2015.txt", row.names = F, sep = "\t")
Cyclones <- read.table("Cyclones1985_2015.txt", header = T, sep = '\t')
Cyclones.RM <- merge(Cyclones, RM.Sites.round1, by=c('x','y'), all.y = T)
COTS.RM <- merge(COTS, RM.Sites.round1, by=c('x','y'), all.y = T)
COTS.RM <- merge(RM.Sites.round1, COTS,  by=c('x','y'), all.x = T)
COTS.RM <- merge(COTS, RM.Sites.round1, by=c('x','y'), all.y = T)
COTS.RM <- COTS.RM[,c(36,1:35)]
Bleaching.RM <- Bleaching.RM[,c(5,1:4)]
Cyclones.RM <- Cyclones.RM[,c(34,1:33)]
write.table(Bleaching.RM, "BleachingRM.txt", row.names = F, sep = "\t")
write.table(COTS.RM, "COTSRM.txt", row.names = F, sep = "\t")
write.table(Cyclones.RM, "CyclonesRM.txt", row.names = F, sep = "\t")
summary(bl02.intdf)
plot(bl02)
coordinates(bl02) = ~long+lat
plot(bl98.int)
source('~/GitHub/COTS_popmodel/COTSModel_PrepareWorkspace.R', echo=TRUE)
load("C:/Users/jc312264/Dropbox/CoTS_Model/R_Workspaces/COTS_Model_2016-09-06.RData")
Fert.data <- data.frame(Dist = c(0,2,4,8,16,32,64,100), PercFert = c(90,86.5, 71.8,71.9,41.5,26.8,20.5,5.8))
m1 <- as.formula(Distance ~ p * exp(k * Date)) #standard
m2 <- as.formula(Distance ~ p * exp(k * Date) + q) #standard
m3 <- as.formula(Size ~ p * exp(k * Date) + (92-p)) #fixed intercept of 92%
m1 <- as.formula(PercFert ~ p * exp(k * Dist)) #standard
m2 <- as.formula(PercFert ~ p * exp(k * Dist) + q) #standard
m3 <- as.formula(PercFert ~ p * exp(k * Dist) + (92-p)) #fixed intercept of 92%
nls1 <- nls(m1,start=list(p=92,k=-0.026, q=1), data = Fert.data)
nls1 <- nls(m1,start=list(p=80,k=-0.05, q=1), data = Fert.data)
nls1 <- nls(m1,start=list(p=1,k=1, q=1), data = Fert.data)
nls1 <- nls(m1,start=list(p=1,k=1,), data = Fert.data)
nls1 <- nls(m1,start=list(p=80,k=-0.05), data = Fert.data)
getPars(nls1)
#Retrieve best fit model parameters
BestFitPars <- function(nls.object){
confints <- confint(nls.object)
bestpars <- nls.object$m$getPars()
upperpars <- confints[,2]
lowerpars <- confints[,1]
pars <- data.frame(bestpars,upperpars,lowerpars)
return(pars)
}
BestFitPars(nls1)
nls3 <- nls(m2,start=list(p=80,k=-0.05), data = Fert.data)
BestFitPars(nls3)
nls3 <- nls(m3,start=list(p=80,k=-0.05), data = Fert.data)
BestFitPars(nls3)
m2 <- as.formula(PercFert ~ p * exp(k * Dist) + q) #standard
nls2 <- nls(m2,start=list(p=80,k=-0.05, q=1), data = Fert.data)
BestFitPars(nls2)
nls2 <- nls(m2,start=list(p=80,k=-0.05, q=50), data = Fert.data)
BestFitPars(nls2)
exp(0)
nls2 <- nls(m2,start=list(p=80,k=-0.05, q=10), data = Fert.data)
BestFitPars(nls2)
nls2 <- nls(m2,start=list(p=80,k=-0.05, q=10), data = Fert.data, control = list(maxiter=500))
BestFitPars(nls2)
nls2 <- nls(m2,start=list(p=90,k=-0.05, q=10), data = Fert.data, control = list(maxiter=500))
BestFitPars(nls2)
BestFitPars(nls1)
BestFitPars(nls3)
em <-function(x,p,k,q) {(p*exp(k*x)) + q}
em.fixed <-function(x,p,k,f) {(p*exp(k*x)) + (f-p)}
nlsCIplot <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
fit.data$upper <- em(fit.data$x, upperpars[1], upperpars[2], upperpars[3])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2], lowerpars[3])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=FertPerc)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function") +
}
nlsCIplot <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
fit.data$upper <- em(fit.data$x, upperpars[1], upperpars[2], upperpars[3])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2], lowerpars[3])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=FertPerc)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
}
nlsCIplot(nls1, Fert.data)
nlsCIplot <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
fit.data$upper <- em(fit.data$x, upperpars[1], upperpars[2], upperpars[3])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2], lowerpars[3])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
}
nlsCIplot(nls1, Fert.data)
Data <- Fert.data
nls.object <- nls1
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
nls.object <- nls2
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
lowerpars <- confints[,1]
upperpars <- confints[,2]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
fit.data$upper <- em(fit.data$x, upperpars[1], upperpars[2], upperpars[3])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2], lowerpars[3])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
nlsCIplot(nls2, Fert.data)
nls.object <- nls1
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,max(Data[,1], na.rm=TRUE),len=length(Data[,1])),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2])
fit.data$best <- em.fixed(fit.data$x, bestpars[1], bestpars[2])
em2<-function(x,p,k) {(p*exp(k*x))}
fit.data$best <- em2(fit.data$x, bestpars[1], bestpars[2])
fit.data$upper <- em2(fit.data$x, upperpars[1], upperpars[2])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2])
fit.data$lower <- em2(fit.data$x, lowerpars[1], lowerpars[2])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
fit.data <- data.frame(x=seq(0,m200, na.rm=TRUE),len=100),
best=NA, upper=NA, lower=NA)
fit.data <- data.frame(x=seq(0,200, na.rm=TRUE),len=100),
best=NA, upper=NA, lower=NA)
fit.data <- data.frame(x=seq(0,200,len=100),
best=NA, upper=NA, lower=NA)
fit.data$best <- em2(fit.data$x, bestpars[1], bestpars[2])
fit.data$upper <- em2(fit.data$x, upperpars[1], upperpars[2])
fit.data$lower <- em2(fit.data$x, lowerpars[1], lowerpars[2])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
nlsCIplot <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,200,len=100),
best=NA, upper=NA, lower=NA)
fit.data$best <- em(fit.data$x, bestpars[1], bestpars[2], bestpars[3])
fit.data$upper <- em(fit.data$x, upperpars[1], upperpars[2], upperpars[3])
fit.data$lower <- em(fit.data$x, lowerpars[1], lowerpars[2], lowerpars[3])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
}
nlsCIplot2 <- function(nls.object, Data) {
nlsCIplot2 <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,200,len=100),
best=NA, upper=NA, lower=NA)
fit.data$best <- em2(fit.data$x, bestpars[1], bestpars[2])
fit.data$upper <- em2(fit.data$x, upperpars[1], upperpars[2])
fit.data$lower <- em2(fit.data$x, lowerpars[1], lowerpars[2])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
}
nlsCIplot(nls2, Fert.data)
nlsCIplot2 <- function(nls.object, Data) {
(confints <- confint(nls.object))
(bestpars <- nls.object$m$getPars())
upperpars <- confints[,2]
lowerpars <- confints[,1]
(pars <- data.frame(bestpars,upperpars,lowerpars))
fit.data <- data.frame(x=seq(0,200,len=100),
best=NA, upper=NA, lower=NA)
fit.data$best <- em2(fit.data$x, bestpars[1], bestpars[2])
fit.data$upper <- em2(fit.data$x, upperpars[1], upperpars[2])
fit.data$lower <- em2(fit.data$x, lowerpars[1], lowerpars[2])
ggplot(fit.data, aes(y=best, x=x)) +
geom_line() + theme_classic() +
geom_ribbon(aes(ymin=lower, ymax=upper), fill='blue', alpha=0.2) +
geom_point(data=Data, aes(x=Dist,y=PercFert)) +
xlab("Distance") +
ylab("Percentage Eggs Fertilised") +
ggtitle("Fertilisation Function")
}
nlsCIplot(nls2, Fert.data)
nlsCIplot(nls1, Fert.data)
nlsCIplot2(nls1, Fert.data)
nlsCIplot2(nls3, Fert.data)

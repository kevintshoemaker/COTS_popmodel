prod(DistMat.NotFert[1,])
sum(DistMat.NotFert[1,])
View(DistMat.Fert)
View(DistMat1)
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
View(DistMat.NotFert)
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
Fert <- apply(NotFert, FUN = function(x){1-x})
Fert <- 1-NotFert
fertbydens <- [[]]
fertbydens <- ls()
fertbydens <- list()
fertbydens[[1]] <- Fert
names(fertbydens[[1]]) <- Densities[10]
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
Fert <- 1-NotFert
fertbydens[[i]] <- Fert
names(fertbydens[[i]]) <- Densities[i]
}
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
View(Males)
View(props)
is.na(props[1,])
is.na(props[1,2:3])==1)
is.na(props[1,2:3])==1
sum(is.na(props[1,2:3]))
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
Fert <- 1-NotFert
fertbydens[[i]] <- Fert
names(fertbydens[[i]]) <- Densities[i]
}
}
fertbydens[3]
names(fertbydens[3]) <- "3 gals"
fertbydens[3]
names(fertbydens[[3]]) <- "3 gals"
fertbydens
names(fertbydens) <- Densities
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
Fert <- 1-NotFert
fertbydens[[i]] <- Fert
}
names(fertbydens) <- Densities
}
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
Fert <- 1-NotFert
fertbydens[[i]] <- Fert
}
}
names(fertbydens) <- Densities
fert.df <- as.data.frame(fertbydens)
props
dens <- replicate(densities, props[,'Female'])
props[,'Female']
densities
dens <- replicate(Densities, props[,'Female'])
dens <- replicate(Densities, times = props[,'Female'])
rep(1:4, each = 2, times = 3)
dens <- replicate(Densities, each = 1, times = props[,'Female'])
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- NA
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
names(fertbydens) <- Densities
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
names(fertbydens) <- Densities
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
ggplot(data=fert.df, aes(x=dens, y=fert)) +
geom_point() +
theme_classic()
ggplot(data=fert.df, aes(x=dens, y=fert)) +
geom_point() +
geom_smooth() +
theme_classic()
ggplot(data=fert.df, aes(x=dens, y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=fert.df, aes(x=as.factor(dens), y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=fert.df, aes(x=as.factor(log(dens)), y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=fert.df, aes(x=as.factor(exp(dens)), y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=fert.df, aes(x=as.factor(dens), y=fert)) +
geom_boxplot() +
theme_classic()
FertVsDensity <- function (Densities, SexRatio, expParams) {
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
# name the list by the desnity of the population
names(fertbydens) <- Densities
#convert into a dataframe for plotting
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
return(c(fert.df, fertbydens))
}
FertVsDensity(Densities, SexRatio, expParams)
f1 <- FertVsDensity(Densities, SexRatio, expParams)
FertVsDensity <- function (Densities, SexRatio, expParams) {
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
# name the list by the desnity of the population
names(fertbydens) <- Densities
#convert into a dataframe for plotting
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
return(list(fert.df, fertbydens))
}
f1 <- FertVsDensity(Densities, SexRatio, expParams)
FertVsDensity <- function (Densities, SexRatio, expParams) {
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
# name the list by the desnity of the population
names(fertbydens) <- Densities
#convert into a dataframe for plotting
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
return(list(FertbyDens.df = fert.df, FertbyDens = FertbyDens))
}
f1 <- FertVsDensity(Densities, SexRatio, expParams)
FertVsDensity <- function (Densities, SexRatio, expParams) {
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
# name the list by the desnity of the population
names(fertbydens) <- Densities
#convert into a dataframe for plotting
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
return(list(FertbyDens.df = fert.df, FertbyDens = fertbydens))
}
f1 <- FertVsDensity(Densities, SexRatio, expParams)
save.image("C:/Users/jc312264/Dropbox/CoTS_Model/R_Workspaces/COTS_Model_2016-10-03.RData")
FertVsDensity <- function (Densities, SexRatio, expParams) {
# Place all adults amongst landscape
props <- data.frame(Dens=Densities, Female = NA, Male = NA)
fertbydens <- list()
for (i in 1:length(Densities)){
coordsx <- runif(Densities[i], min = 0, max = 1000)
coordsy <- runif(Densities[i], min = 0, max = 1000)
coords <- data.frame(x = coordsx, y = coordsy)
# randomly assign each coordinate pair as male or female
coords$sex <- sample(c('M', 'F'), length(coordsx), replace = T, prob = SexRatio)
#determine number of males and females
props[i,2:3] <- prop.table(table(coords$sex))[1:2]*Densities[i]
if(sum(is.na(props[i,2:3]))==1) {
fertbydens[[i]] <- rep(NA, Densities[i])
next
} else {
# now for each female, we calculate the distance and the probability that her eggs were NOT
# fertilised by that male
Females <- as.matrix(coords[coords[,'sex']=='F',][,1:2])
Males <- as.matrix(coords[coords[,'sex']=='M',][,1:2])
# Each row has the distance between each female and male
DistMat <- SpatialTools::dist2(Females, Males)
# convert distance into probability of not fertalising
em2 <- function(x,p,k) {(1- (p*exp(k*x))/100)}
DistMat.NotFert <- matrix(sapply(DistMat, FUN = em2, expParams[1], expParams[2]),
nrow = length(Females[,1]), ncol = length(Males[,1]))
#Multiply across each row to find out the probability that egss from that female were not fertilised
# by any male
NotFert <- apply(DistMat.NotFert, MARGIN = 1, FUN = prod)
fertbydens[[i]] <- 1-NotFert
}
}
# name the list by the desnity of the population
names(fertbydens) <- Densities
#convert into a dataframe for plotting
dens <- rep(Densities, each = 1, times = props[,'Female'])
fert <- unlist(fertbydens)
fert.df <- data.frame(dens,fert)
return(list(Props = props, FertbyDens.df = fert.df, FertbyDens = fertbydens))
}
f1 <- FertVsDensity(Densities, SexRatio, expParams)
Densities <- geomSeries(2, 10000)
f1 <- FertVsDensity(Densities, SexRatio, expParams)
ggplot(data=f1[2], aes(x=as.factor(dens), y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=f1[[2]], aes(x=as.factor(dens), y=fert)) +
geom_boxplot() +
theme_classic()
ggplot(data=f1[[2]], aes(x=as.factor(dens), y=fert)) +
geom_boxplot() +
geom_smooth() +
theme_classic()
save.image("C:/Users/jc312264/Dropbox/CoTS_Model/R_Workspaces/COTS_Model_2016-10-03.RData")
setwd(DATA_DIRECTORY)
PopData <- read.table("PopData.txt", header = TRUE, sep = "\t")
Coords <- PopData[,c('x','y')]
coordinates(Coords) <- ~x+y
loadPackages()
loadPackage("Matrix")         # Sparse matrices
loadPackages <- function(){
loadPackage("lhs")            # for latin hypercube sampling
loadPackage("RCurl")          # for loading source code from github
loadPackage("raster")         # for managing raster data
loadPackage("rgdal")          # for reading and writing all sorts of spatial data
loadPackage("popbio")         # for doing basic matrix population modeling
loadPackage("tidyverse")      # data manipulation
loadPackage("rgeos")          # geometry applications
loadPackage("plyr")           # data wrangling
loadPackage("dplyr")          # data wrangling
loadPackage("reshape2")       # data wrangling
loadPackage("gstat")          # performing interpolation
loadPackage("ggplot2")        # plotting
loadPackage("emdbook")        # support for ecological models with data book
loadPackage("SpatialTools")   # compute pairwise distances
loadPackage("Matrix")         # Sparse matrices
}
Gdist <- gDistance(Coords, Coords, byid = T)
coordinates(Coords) <- ~x+y
Gdist <- gDistance(Coords, Coords, byid = T)
Gdist[1:10,1:10]
Gdistkm <- Gdist*100
Gdist[Gdist>500] <- 0
Gdist.Sp <- Matrix(Gdist, sparse=T)
Gdist <- Gdist*100
rm(Gdistkm)
Gdist[Gdist>500] <- 0
Gdist.Sp <- Matrix(Gdist, sparse=T)
Pdist <- apply(Gdist.Sp, 2, function(x) ((1/x)/plus(1/x)))
plus <- function(x) {
if(all(is.na(x))){
c(x[0],NA)} else {
sum(x,na.rm = TRUE)}
}
Pdist <- apply(Gdist.Sp, 2, function(x) ((1/x)/plus(1/x)))
